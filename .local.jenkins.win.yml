language: python
python:
  - { PATH: "{{replace(Python35, '\\', '\\\\')}}", VERSION: 3.5, DIST: std }
  - { PATH: "{{replace(Python36, '\\', '\\\\')}}", VERSION: 3.6, DIST: std }
  - { PATH: "{{replace(Anaconda3, '\\', '\\\\')}}", VERSION: 3.5, DIST: conda }
  - { PATH: "{{replace(WinPython35, '\\', '\\\\')}}", VERSION: 3.5, DIST: winpython }
virtualenv:
  - path: {{ospathjoin(root_path, pickname("%NAME_JENKINS%", project_name + "_%VERSION%_%DIST%_%NAME%"), "_venv")}}
install:
  - pip install --no-cache-dir --no-deps --index http://localhost:8067/simple/ pyquickhelper pyensae pymmails pymyinstall pyrsslocal mlstatpy
  - pip install -r requirements.txt
  - pip freeze
before_script:
  - python -u setup.py try_import
script:
  - { CMD: "python -u setup.py unittests", NAME: "UT", TIMEOUT: 3600 }  # timeout is 3600 for the documentation
  - { CMD: "python -u setup.py unittests_LONG", NAME: "UT_LONG", TIMEOUT: 3600 }
  - { CMD: "python -u setup.py unittests -e .*SKIP.* -g \".*((SKIP)|(theano)|(keras)|(deep)).*\"", NAME: "UT_SKIP" }
  - { CMD: "python -u setup.py unittests -e .*_1A_.* -g \".*((SKIP)|(theano)|(keras)).*\"", NAME: "UT_1A" }
  - { CMD: "python -u setup.py unittests -e .*_2A_.* -g \".*((SKIP)|(theano)|(keras)).*\"", NAME: "UT_2A", TIMEOUT: 3600 }
  - { CMD: "python -u setup.py unittests -e .*_3A_.* -g \".*((SKIP)|(theano)|(keras)).*\"", NAME: "UT_3A" }
  - { CMD: "python -u setup.py unittests -e .*_EX_.* -g \".*((SKIP)|(theano)|(keras)).*\"", NAME: "UT_EX", TIMEOUT: 3600 }
  - { CMD: "python -u setup.py unittests -e .*_GUI_.* -g \".*((SKIP)|(theano)|(keras)).*\"", NAME: "UT_GUI", TIMEOUT: 2400 }
  - { CMD: "python -u setup.py unittests -e \".*((theano)|(keras)).*\"", NAME: "UT_DEEP", TIMEOUT: 2400 }
  - if [ ${VERSION} == "3.5" and ${DIST} == "std" ]
      then 
        --CMD=python -u setup.py build_sphinx;
        --NAME=DOC;
      fi  
after_script:
  - python -u setup.py bdist_wheel
  - if [ ${DIST} != "conda" and ${VERSION} == "3.5" and ${NAME} == "UT" ] then copy dist\*.whl ..\..\local_pypi\local_pypi_server fi
documentation:
  - if [ ${PYTHON} == "{{Python35}}" and ${NAME} in {"UT", "DOC"} ] then python -u setup.py build_pres fi
  - if [ ${PYTHON} == "{{Python35}}" and ${NAME} in {"UT", "DOC"} ] then python -u setup.py build_pres_2A fi
  - if [ ${PYTHON} == "{{Python35}}" and ${NAME} in {"UT", "DOC"} ] then python -u setup.py build_pres_3A fi
  - if [ ${PYTHON} == "{{Python35}}" and ${NAME} in {"UT", "DOC"} ] then python -u setup.py build_pres_1Ap fi
  - if [ ${PYTHON} == "{{Python35}}" and ${NAME} == "UT" ] then python -u setup.py build_sphinx fi
  - if [ ${PYTHON} == "{{Python35}}" and ${NAME} in {"UT", "DOC"} ] then xcopy /E /C /I /Y _doc\sphinxdoc\build\html dist\html fi
  - if [ ${PYTHON} == "{{Python35}}" and ${NAME} in {"UT", "DOC"} ] then xcopy /E /C /I /Y _doc\sphinxdoc\build2\html dist\html2 fi
  - if [ ${PYTHON} == "{{Python35}}" and ${NAME} in {"UT", "DOC"} ] then xcopy /E /C /I /Y _doc\sphinxdoc\build3\html dist\html3 fi
  - if [ ${PYTHON} == "{{Python35}}" and ${NAME} in {"UT", "DOC"} ] then xcopy /E /C /I /Y _doc\presentation_projets\a2015\build\html dist\html_pres_1Ap\2015 fi
  - if [ ${PYTHON} == "{{Python35}}" and ${NAME} in {"UT", "DOC"} ] then xcopy /E /C /I /Y _doc\presentation_projets\a2016\build\html dist\html_pres_1Ap fi
  - if [ ${PYTHON} == "{{Python35}}" and ${NAME} in {"UT", "DOC"} ] then xcopy /E /C /I /Y _doc\presentation_2A\build\html dist\html_pres_2A fi
  - if [ ${PYTHON} == "{{Python35}}" and ${NAME} in {"UT", "DOC"} ] then xcopy /E /C /I /Y _doc\presentation_3A\build\html dist\html_pres_3A fi
  - if [ ${PYTHON} == "{{Python35}}" and ${NAME} in {"UT", "DOC"} ] then xcopy /E /C /I /Y _doc\presentation\build\html dist\html_pres fi
